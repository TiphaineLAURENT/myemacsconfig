#!/usr/bin/python3

from sys import argv
from collections import defaultdict

def build_depedencies_matrix(dependencies, files):
    matrix = []
    for row in files:
        r = []
        for col in files:
            if row not in dependencies.keys():
                r.append(0)
                continue
            if col in dependencies[row] and col != row:
                r.append(1)
            else:
                r.append(0)
        matrix.append(r)
    return matrix

def get_depedencies_display(matrix, files):
    lenFiles = len(files)
    displays = []
    for row in range(lenFiles):
        if 1 in matrix[row]:
            display = files[row]
            for r in range(lenFiles):
                if matrix[r][row] == 1:
                    display += " -> " + files[r]
            for col in range(lenFiles):
                if matrix[row][col] == 1:
                    displays.append(files[col] + " -> " + display)
    return sorted(displays)

def parse_all(makefilename):
    dependencies = defaultdict(list)
    files = set()
    with open(makefilename, "r") as f:
        for line in f.readlines():
            words = line.split()
            lenWords = len(words)
            if lenWords < 2:
                continue
            if words[0][len(words[0]) - 1] == ":":
                files.add(words[0][:-1])
                for i in range(1, lenWords):
                    files.add(words[i])
                    dependencies[words[0][:-1]].append(words[i])
    files = sorted(files)

    matrix = build_depedencies_matrix(dependencies, files)
    displays = get_depedencies_display(matrix, files)

    return matrix, displays

def check_depedencies(makefilename, filename):
    pass

if __name__ == "__main__":
    # try:
        if len(argv) > 3 or len(argv) < 2:
            exit(84)

        matrix, displays = parse_all(argv[1])
        if len(argv) == 2:
            for row in matrix:
                line = "["
                for col in row:
                    line += col + " "
                print(line[:-1] + "]")
            for display in displays:
                print(display)
        elif len(argv) == 3:
            check_depedencies(argv[1], argv[2])

    # except Exception as e:
    #     print(str(e))
    #     exit(84)
